meta {
  name: Create Tag
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/cgi-bin/tags/create?access_token={{accessToken}}
  body: json
  auth: none
}

body:json {
  {
    "tag": {
      "name": "VIP用户"
    }
  }
}

docs {
  # Create User Tag

  Create a new user tag for categorizing followers.

  ## Endpoint
  `POST /cgi-bin/tags/create`

  ## Parameters
  - `tag.name` (required): Tag name (max 30 characters)

  ## Response
  ```json
  {
    "tag": {
      "id": 134,
      "name": "VIP用户"
    }
  }
  ```

  ## Notes
  - Max 100 tags per account
  - Tag names must be unique
  - Use tags to organize and target users
}

script:pre-request {
  // Automatically fetch access token before request
  const axios = require('axios');
  const baseUrl = bru.getEnvVar('baseUrl');
  const appId = bru.getEnvVar('appId');
  const appSecret = bru.getEnvVar('appSecret');

  const tokenResponse = await axios.post(`${baseUrl}/cgi-bin/stable_token`, {
    grant_type: 'client_credential',
    appid: appId,
    secret: appSecret
  });

  if (tokenResponse.data.access_token) {
    bru.setVar('accessToken', tokenResponse.data.access_token);
    console.log('✓ Access token obtained:', tokenResponse.data.access_token.substring(0, 20) + '....');
  } else {
    console.error('✗ Failed to get access token:', tokenResponse.data);
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });

  test("Tag created with ID", function() {
    expect(res.body.tag).to.exist;
    expect(res.body.tag.id).to.be.a('number');
  });
}

script:post-response {
  if (res.body.tag) {
    console.log('✓ Tag created:', res.body.tag.name);
    console.log('Tag ID:', res.body.tag.id);
    bru.setVar('lastCreatedTagId', res.body.tag.id);
  }
}
