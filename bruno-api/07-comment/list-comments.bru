meta {
  name: List Article Comments
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/cgi-bin/comment/list?access_token={{accessToken}}
  body: json
  auth: none
}

body:json {
  {
    "msg_data_id": 123456789,
    "index": 0,
    "begin": 0,
    "count": 50,
    "type": 0
  }
}

docs {
  # List Article Comments

  Retrieve comments for a specific article with pagination.

  ## Endpoint
  `POST /cgi-bin/comment/list`

  ## Parameters
  - `msg_data_id` (required): Message data ID from publish response
  - `index` (required): Article index in multi-article (0-based)
  - `begin` (required): Starting position (0-based)
  - `count` (required): Number to return (max 50)
  - `type` (required): Comment type (0=all, 1=featured only)

  ## Response
  ```json
  {
    "errcode": 0,
    "errmsg": "ok",
    "total": 100,
    "comment": [{
      "user_comment_id": 1,
      "openid": "OPENID",
      "create_time": 1234567890,
      "content": "Comment content",
      "comment_type": 0,
      "reply": {
        "content": "Reply content",
        "create_time": 1234567891
      }
    }]
  }
  ```

  ## Response Fields
  - `total`: Total comment count
  - `comment`: Array of comment objects
    - `user_comment_id`: Comment ID
    - `openid`: User's OpenID
    - `create_time`: Unix timestamp
    - `content`: Comment text
    - `comment_type`: 0=normal, 1=featured
    - `reply`: Official account reply (if exists)

  ## Type Parameter
  - `0`: All comments (default)
  - `1`: Featured comments only

  ## Pagination
  - Use begin and count for pagination
  - Maximum count per request: 50
  - Sort by creation time (newest first)
}

script:pre-request {
  const axios = require('axios');
  const baseUrl = bru.getEnvVar('baseUrl');
  const appId = bru.getEnvVar('appId');
  const appSecret = bru.getEnvVar('appSecret');

  const tokenResponse = await axios.post(`${baseUrl}/cgi-bin/stable_token`, {
    grant_type: 'client_credential',
    appid: appId,
    secret: appSecret
  });

  if (tokenResponse.data.access_token) {
    bru.setVar('accessToken', tokenResponse.data.access_token);
    console.log('✓ Access token obtained:', tokenResponse.data.access_token.substring(0, 20) + '....');
  } else {
    console.error('✗ Failed to get access token:', tokenResponse.data);
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });

  test("errcode is 0", function() {
    expect(res.body.errcode).to.equal(0);
  });

  test("Has total count", function() {
    expect(res.body.total).to.be.a('number');
  });

  test("Has comment array", function() {
    expect(res.body.comment).to.be.an('array');
  });
}

script:post-response {
  if (res.body.errcode === 0) {
    console.log('✓ Comments retrieved successfully');
    console.log('Total comments:', res.body.total);
    console.log('Returned:', res.body.comment ? res.body.comment.length : 0);

    if (res.body.comment && res.body.comment.length > 0) {
      console.log('First comment ID:', res.body.comment[0].user_comment_id);
      console.log('Content:', res.body.comment[0].content);
      if (res.body.comment[0].reply) {
        console.log('Has reply:', res.body.comment[0].reply.content);
      }
    }
  } else {
    console.error('✗ Failed to retrieve comments');
    console.error('Error:', res.body.errcode, res.body.errmsg);
  }
}
