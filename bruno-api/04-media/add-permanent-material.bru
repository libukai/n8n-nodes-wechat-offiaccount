meta {
  name: Add Permanent Material
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/cgi-bin/material/add_material?access_token={{accessToken}}&type=image
  body: multipartForm
  auth: none
}

params:query {
  access_token: {{accessToken}}
  type: image
}

body:multipart-form {
  media: @file(/path/to/your/image.jpg)
}

docs {
  # Add Permanent Material

  Upload permanent media files (no expiration).

  ## Endpoint
  `POST /cgi-bin/material/add_material`

  ## Parameters
  - `access_token` (required): Access token (query parameter)
  - `type` (required): Media type (query parameter)
    - `image`: Image (jpg/png, 2MB max)
    - `voice`: Voice (amr/mp3, 2MB max)
    - `video`: Video (mp4, 10MB max)
    - `thumb`: Thumbnail (jpg, 64KB max)
  - `media` (required): File binary data (multipart form)

  ## For Video Type
  Additional description parameter required:
  ```json
  {
    "title": "Video Title",
    "introduction": "Video Description"
  }
  ```

  ## Response
  ```json
  {
    "media_id": "MEDIA_ID",
    "url": "http://mmbiz.qpic.cn/..."
  }
  ```

  ## Notes
  - Permanent materials never expire
  - Max 100,000 permanent materials per account
  - Images get a permanent URL
  - Use media_id for sending messages
  - Cannot be used in template messages

  ## Limits by Account Type
  - Image: 100,000 items
  - Voice: 1,000 items
  - Video: 1,000 items
  - Thumb: 10,000 items

  ## Usage
  1. Replace `/path/to/your/image.jpg` with actual file path
  2. Change `type` parameter based on media type
  3. Upload and receive media_id
  4. Use media_id permanently (no expiration)
}

script:pre-request {
  // Automatically fetch access token before request
  const axios = require('axios');
  const baseUrl = bru.getEnvVar('baseUrl');
  const appId = bru.getEnvVar('appId');
  const appSecret = bru.getEnvVar('appSecret');

  const tokenResponse = await axios.post(`${baseUrl}/cgi-bin/stable_token`, {
    grant_type: 'client_credential',
    appid: appId,
    secret: appSecret
  });

  if (tokenResponse.data.access_token) {
    bru.setVar('accessToken', tokenResponse.data.access_token);
    console.log('✓ Access token obtained:', tokenResponse.data.access_token.substring(0, 20) + '....');
  } else {
    console.error('✗ Failed to get access token:', tokenResponse.data);
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });

  test("Media ID returned", function() {
    if (res.body.media_id) {
      expect(res.body.media_id).to.be.a('string');
    }
  });

  test("URL returned for image", function() {
    // URL only returned for image type
    if (res.body.url) {
      expect(res.body.url).to.be.a('string');
      expect(res.body.url).to.include('http');
    }
  });
}

script:post-response {
  if (res.body.media_id) {
    console.log('✓ Permanent material uploaded successfully');
    console.log('Media ID:', res.body.media_id);
    if (res.body.url) {
      console.log('Permanent URL:', res.body.url);
    }
    console.log('Valid: Forever (no expiration)');
    bru.setVar('lastPermanentMediaId', res.body.media_id);
  } else {
    console.error('✗ Failed to upload permanent material');
    console.error('Error:', res.body.errcode, res.body.errmsg);
  }
}
