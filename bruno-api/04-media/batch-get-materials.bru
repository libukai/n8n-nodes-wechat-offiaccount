meta {
  name: Batch Get Materials List
  type: http
  seq: 5
}

post {
  url: {{baseUrl}}/cgi-bin/material/batchget_material?access_token={{accessToken}}
  body: json
  auth: none
}

body:json {
  {
    "type": "image",
    "offset": 0,
    "count": 20
  }
}

docs {
  # Batch Get Materials List

  Retrieve a paginated list of permanent materials.

  ## Endpoint
  `POST /cgi-bin/material/batchget_material`

  ## Parameters
  - `access_token` (required): Access token (query parameter)
  - `type` (required): Material type
    - `image`: Images
    - `video`: Videos
    - `voice`: Voice files
    - `news`: News articles
  - `offset` (required): Starting position (0 = first item)
  - `count` (required): Number to return (1-20)

  ## Response Format

  ### For image/voice/video:
  ```json
  {
    "total_count": 2,
    "item_count": 2,
    "item": [{
      "media_id": "MEDIA_ID",
      "name": "filename.jpg",
      "update_time": 1234567890,
      "url": "http://mmbiz.qpic.cn/..."
    }]
  }
  ```

  ### For news:
  ```json
  {
    "total_count": 1,
    "item_count": 1,
    "item": [{
      "media_id": "MEDIA_ID",
      "content": {
        "news_item": [{
          "title": "Article Title",
          "author": "Author",
          "digest": "Summary",
          "content": "HTML content",
          "content_source_url": "URL",
          "thumb_media_id": "THUMB_ID",
          "show_cover_pic": 1,
          "url": "Article URL",
          "thumb_url": "Cover URL"
        }]
      },
      "update_time": 1234567890
    }]
  }
  ```

  ## Pagination
  - Returns up to 20 items per request
  - Use offset for pagination
  - total_count shows total available items
  - item_count shows items in current response

  ## Notes
  - Images include permanent URLs
  - Video includes additional name and URL fields
  - News contains full article structure
  - Update time is Unix timestamp
}

script:pre-request {
  // Automatically fetch access token before request
  const axios = require('axios');
  const baseUrl = bru.getEnvVar('baseUrl');
  const appId = bru.getEnvVar('appId');
  const appSecret = bru.getEnvVar('appSecret');

  const tokenResponse = await axios.post(`${baseUrl}/cgi-bin/stable_token`, {
    grant_type: 'client_credential',
    appid: appId,
    secret: appSecret
  });

  if (tokenResponse.data.access_token) {
    bru.setVar('accessToken', tokenResponse.data.access_token);
    console.log('✓ Access token obtained:', tokenResponse.data.access_token.substring(0, 20) + '....');
  } else {
    console.error('✗ Failed to get access token:', tokenResponse.data);
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });

  test("Response has total_count", function() {
    expect(res.body.total_count).to.be.a('number');
  });

  test("Response has item array", function() {
    expect(res.body.item).to.be.an('array');
  });

  test("Count matches", function() {
    expect(res.body.item_count).to.equal(res.body.item.length);
  });
}

script:post-response {
  if (res.body.total_count !== undefined) {
    console.log('✓ Materials list retrieved');
    console.log('Total materials:', res.body.total_count);
    console.log('Returned in this page:', res.body.item_count);

    if (res.body.item && res.body.item.length > 0) {
      console.log('First material ID:', res.body.item[0].media_id);
      if (res.body.item[0].name) {
        console.log('Filename:', res.body.item[0].name);
      }
    }
  } else {
    console.error('✗ Error:', res.body.errcode, res.body.errmsg);
  }
}
