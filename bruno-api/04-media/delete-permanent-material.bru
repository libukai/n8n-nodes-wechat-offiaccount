meta {
  name: Delete Permanent Material
  type: http
  seq: 7
}

post {
  url: {{baseUrl}}/cgi-bin/material/del_material?access_token={{accessToken}}
  body: json
  auth: none
}

body:json {
  {
    "media_id": "MEDIA_ID_HERE"
  }
}

docs {
  # Delete Permanent Material

  Delete a permanent material by media_id.

  ## Endpoint
  `POST /cgi-bin/material/del_material`

  ## Parameters
  - `access_token` (required): Access token (query parameter)
  - `media_id` (required): Media ID to delete

  ## Response
  ```json
  {
    "errcode": 0,
    "errmsg": "ok"
  }
  ```

  ## Notes
  - Permanently deletes the material
  - Cannot be recovered after deletion
  - Media ID becomes invalid
  - Use carefully in production
  - Verify media_id before deletion

  ## Error Codes
  - `40007`: Invalid media_id
  - `40001`: Invalid access_token
}

script:pre-request {
  // Automatically fetch access token before request
  const axios = require('axios');
  const baseUrl = bru.getEnvVar('baseUrl');
  const appId = bru.getEnvVar('appId');
  const appSecret = bru.getEnvVar('appSecret');

  const tokenResponse = await axios.post(`${baseUrl}/cgi-bin/stable_token`, {
    grant_type: 'client_credential',
    appid: appId,
    secret: appSecret
  });

  if (tokenResponse.data.access_token) {
    bru.setVar('accessToken', tokenResponse.data.access_token);
    console.log('✓ Access token obtained:', tokenResponse.data.access_token.substring(0, 20) + '....');
  } else {
    console.error('✗ Failed to get access token:', tokenResponse.data);
  }
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });

  test("errcode is 0", function() {
    expect(res.body.errcode).to.equal(0);
  });

  test("errmsg is ok", function() {
    expect(res.body.errmsg).to.equal('ok');
  });
}

script:post-response {
  if (res.body.errcode === 0) {
    console.log('✓ Material deleted successfully');
  } else {
    console.error('✗ Failed to delete material');
    console.error('Error:', res.body.errcode, res.body.errmsg);
  }
}
